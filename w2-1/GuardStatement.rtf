{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red155\green35\blue147;\red255\green255\blue255;\red0\green0\blue0;
\red83\green101\blue121;\red57\green0\blue160;\red196\green26\blue22;\red36\green82\blue86;\red92\green38\blue153;
\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c32401\c39745\c47507;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c13924\c32052\c33684;\csgenericrgb\c35922\c14825\c60191;
\csgenericrgb\c11000\c0\c81000;}
\margl1440\margr1440\vieww19980\viewh15060\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \cb3 import
\f1\b0 \cf4  UIKit\
\
\

\f2\i \cf5 //to show how the flow control works of a guard statement
\f1\i0 \cf4 \

\f0\b \cf2 func
\f1\b0 \cf4  someFunction() \{\
    
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 false
\f1\b0 \cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{\
        \cf6 print\cf4 (\cf7 "Condition not met"\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
    \}\
    \cf6 print\cf4 (\cf7 "Condition met"\cf4 )\
\}\
\cf8 someFunction\cf4 ()\
\cf6 print\cf4 (\cf7 "Hello after function call"\cf4 )\
\

\f2\i \cf5 //-----------------------------------------------------
\f1\i0 \cf4 \

\f2\i \cf5 //to show how the flow control works of a guard statement
\f1\i0 \cf4 \

\f0\b \cf2 func
\f1\b0 \cf4  someFunction1() \{\
    
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 true
\f1\b0 \cf4 , 
\f0\b \cf2 true
\f1\b0 \cf4 , 
\f0\b \cf2 true
\f1\b0 \cf4  
\f0\b \cf2 else
\f1\b0 \cf4  \{ 
\f2\i \cf5 //try to use multiple boolean conditions, separated by comma
\f1\i0 \cf4 \
                                   
\f2\i \cf5 // it works like the logical && operator
\f1\i0 \cf4 \
        \cf6 print\cf4 (\cf7 "Condition not met"\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
    \}\
    \cf6 print\cf4 (\cf7 "Condition met"\cf4 )\
\}\
\cf8 someFunction1\cf4 ()\
\cf6 print\cf4 (\cf7 "Hello after function call"\cf4 )\
\
\
\

\f0\b \cf2 func
\f1\b0 \cf4  changeOptionalStringToUpperCase() \{\
    \
    
\f0\b \cf2 var
\f1\b0 \cf4  name:\cf9 String\cf4 ?\
    
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  temp = name \{\
        \cf6 print\cf4 (\cf7 "Uppercased:\cf4 \\\cf7 (\cf4 temp.\cf6 uppercased\cf4 ()\cf7 )"\cf4 )\
    \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
        \cf6 print\cf4 (\cf7 "Name is nil. Cannot process"\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
    \}\
    
\f2\i \cf5 //how to access temp right here?? Solution:Use Guard
\f1\i0 \cf4 \
\}\
\cf8 changeOptionalStringToUpperCase\cf4 ()\
\

\f2\i \cf5 //-------------------------------------------------
\f1\i0 \cf4 \

\f0\b \cf2 func
\f1\b0 \cf4  changeOptionalStringToUpperCase1() \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  name:\cf9 String\cf4 ?\
    
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  temp = name 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
        \cf6 print\cf4 (\cf7 "Name is nil. Cannot process"\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
    \}\
    \cf6 print\cf4 (\cf7 "Uppercased:\cf4 \\\cf7 (\cf4 temp.\cf6 uppercased\cf4 ()\cf7 )"\cf4 )\
\}\
\cf8 changeOptionalStringToUpperCase1\cf4 ()\
\

\f2\i \cf5 //---------------------------------------------
\f1\i0 \cf4 \

\f0\b \cf2 func
\f1\b0 \cf4  changeOptionalStringToUpperCase2() \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  name:\cf9 String\cf4 ? = \cf7 ""\cf4 \
    \
    \
    
\f0\b \cf2 guard
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  temp = name , temp.\cf9 count\cf4  > \cf10 0\cf4   
\f0\b \cf2 else
\f1\b0 \cf4  \{\
        \cf6 print\cf4 (\cf7 "Name is nil or an empty string. Cannot process"\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
    \}\
\
   \cf6 print\cf4 (\cf7 "Uppercased:\cf4 \\\cf7 (\cf4 temp.\cf6 uppercased\cf4 ()\cf7 )"\cf4 )\
\}\
\cf8 changeOptionalStringToUpperCase2\cf4 ()\
}