{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red155\green35\blue147;\red255\green255\blue255;\red0\green0\blue0;
\red11\green79\blue121;\red15\green104\blue160;\red57\green0\blue160;\red93\green108\blue121;\red196\green26\blue22;
\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c77000\c10200\c8600;
\csgenericrgb\c11000\c0\c81000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \cb3 import
\f1\b0 \cf4  UIKit\
\

\f0\b \cf2 protocol
\f1\b0 \cf4  \cf5 FullNameable\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 fullName\cf4 : \cf7 String\cf4  \{ 
\f0\b \cf2 get
\f1\b0 \cf4  \}\
\}\
\
\cf8 //First Implementation\cf4 \

\f0\b \cf2 struct
\f1\b0 \cf4  \cf5 Lecturer\cf4 : \cf7 FullNameable\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 fullName\cf4 : \cf7 String\cf4      \cf8 //stored property with default getter and setter\cf4 \
\}\
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 lecturer\cf4  = Lecturer(fullName: \cf9 "Alan Kennedy"\cf4 )\
lecturer.fullName = \cf9 "Alan C Kennedy"\cf4 \
print (lecturer.fullName)\
\
\cf8 //Second Implementation\cf4 \

\f0\b \cf2 struct
\f1\b0 \cf4  \cf5 Student\cf4 : \cf7 FullNameable\cf4  \{\
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf6 firstName\cf4 : \cf7 String\cf4 \
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf6 middleName\cf4 : \cf7 String\cf4 \
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf6 lastName\cf4 : \cf7 String\cf4 \
\cf8 /*\cf4 \
\cf8     var fullName: String \{\cf4 \
\cf8         return "\\(firstName) \\(middleName) \\(lastName)"\cf4 \
\cf8     \}\cf4 \
\cf8 */\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 fullName\cf4 : \cf7 String\cf4  \{ \cf8 //computed property with a getter only (i.e. read-only)\cf4 \
        
\f0\b \cf2 get
\f1\b0 \cf4  \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf9 "\cf4 \\(firstName)\cf9  \cf4 \\(middleName)\cf9  \cf4 \\(lastName)\cf9 "\cf4 \
        \}\
    \}\
\}\
\

\f0\b \cf2 let
\f1\b0 \cf4  \cf6 me\cf4  = Student(firstName: \cf9 "Robert"\cf4 , middleName: \cf9 "James"\cf4 , lastName: \cf9 "Johnson"\cf4 )\
print (me.fullName)\
\
\
\cf8 //------------------------------------------\cf4 \
\
\

\f0\b \cf2 protocol
\f1\b0 \cf4  \cf5 Blendable\cf4  \{\
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf6 blend\cf4 () -> ()       \cf8 //func blend ()  or //func blend -> Void\cf4 \
\}\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Fruit\cf4 : \cf7 Blendable\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 name\cf4 : \cf7 String\cf4 \
    \
    
\f0\b \cf2 init
\f1\b0 \cf4 (name: \cf7 String\cf4 ) \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .name = name\
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf6 blend\cf4 () \{\
        print(\cf9 "Almost all friut can be used"\cf4 )\
    \}\
\}\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Dairy\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 name\cf4 : \cf7 String\cf4 \
    \
    
\f0\b \cf2 init
\f1\b0 \cf4 (name: \cf7 String\cf4 ) \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .name = name\
    \}\
\}\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Cheese\cf4 : \cf7 Dairy\cf4  \{\
    \cf8 //we cannot use cheese to make smoothie\cf4 \
    \cf8 //so no blendable protocol implemented\cf4 \
\}\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Milk\cf4 : \cf7 Dairy\cf4 , \cf7 Blendable\cf4  \{\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf6 blend\cf4 () \{\
        print(\cf9 "Milk is a type of dairy"\cf4 )\
    \}\
    \
\}\
\

\f0\b \cf2 func
\f1\b0 \cf4  \cf6 makeSmoothie\cf4 (with ingredients: [\cf7 Blendable\cf4 ]) \{\
    
\f0\b \cf2 for
\f1\b0 \cf4  ingredient 
\f0\b \cf2 in
\f1\b0 \cf4  ingredients \{\
            ingredient.blend()\
    \}\
\}\
\

\f0\b \cf2 let
\f1\b0 \cf4  \cf6 orange\cf4  = Fruit(name: \cf9 "Orange"\cf4 )\

\f0\b \cf2 let
\f1\b0 \cf4  \cf6 strawberry\cf4  = Fruit(name: \cf9 "Strawberry"\cf4 )\

\f0\b \cf2 let
\f1\b0 \cf4  \cf6 chocolateMilk\cf4  = Milk(name: \cf9 "Chocolote"\cf4 )\
\
\cf8 //This will work perfectly\cf4 \

\f0\b \cf2 let
\f1\b0 \cf4  \cf6 ingredients\cf4 : [\cf7 Blendable\cf4 ] = [strawberry, chocolateMilk, orange]\
makeSmoothie(with: ingredients)\
\
\cf8 /*\cf4 \
\
\cf8 func makeSmoothie(with ingredients: [Any]) \{\cf4 \
\cf8     for ingredient in ingredients \{\cf4 \
\cf8         if ingredient is Blendable \{\cf4 \
\cf8             (ingredient as! Blendable).blend()\cf4 \
\cf8         \}\cf4 \
\cf8     \}\cf4 \
\cf8 \}\cf4 \
\
\cf8 let strawberry = Fruit(name: "Strawberry")\cf4 \
\cf8 let chocolateMilk = Milk(name: "Chocolote")\cf4 \
\cf8 let cheddar = Cheese(name: "Cheddar")\cf4 \
\
\cf8 //This will give an error because cheddar is not Blendable\cf4 \
\cf8 // change Blendable to Any\cf4 \
\cf8 let ingredients: [Any] = [strawberry, chocolateMilk, cheddar]\cf4 \
\cf8 makeSmoothie(with: ingredients)\cf4 \
\
\cf8 */\cf4 \
\
\cf8 //------------------------------------------\cf4 \
\

\f0\b \cf2 protocol
\f1\b0 \cf4  \cf5 Flyable\cf4  \{\
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf6 fly\cf4 () -> \cf7 String\cf4 \
\}\
\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Airplane\cf4 : \cf7 Flyable\cf4  \{\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf6 fly\cf4 () -> \cf7 String\cf4  \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  (\cf9 "Airplane can fly"\cf4 )\
    \}\
    \
\}\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 JetPlane\cf4 : \cf7 Airplane\cf4  \{\
    
\f0\b \cf2 let
\f1\b0 \cf4  \cf6 jetEngine\cf4 : \cf7 String\cf4  = \cf9 ""\cf4 \
\}\
\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Bird\cf4 : \cf7 Flyable\cf4  \{\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf6 fly\cf4 () -> \cf7 String\cf4  \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  (\cf9 "Bird can fly too"\cf4 )\
    \}\
    \
\}\
\

\f0\b \cf2 let
\f1\b0 \cf4   \cf6 boeing737\cf4  = JetPlane()\

\f0\b \cf2 let
\f1\b0 \cf4   \cf6 boeing747\cf4  = JetPlane()\

\f0\b \cf2 let
\f1\b0 \cf4   \cf6 bluejay\cf4  = Bird()\

\f0\b \cf2 let
\f1\b0 \cf4   \cf6 flyableobjects\cf4 : [\cf7 Flyable\cf4 ] = [boeing737, boeing747, bluejay]\
\

\f0\b \cf2 for
\f1\b0 \cf4  obj 
\f0\b \cf2 in
\f1\b0 \cf4  flyableobjects \{\
    print(obj.fly())\
\}\
\
\
\cf8 //----------------------------------\cf4 \
\

\f0\b \cf2 protocol
\f1\b0 \cf4  \cf5 Animal\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 noOfLegs\cf4 : \cf7 Int\cf4  \{
\f0\b \cf2 get
\f1\b0 \cf4  
\f0\b \cf2 set
\f1\b0 \cf4 \}\
\}\
\

\f0\b \cf2 protocol
\f1\b0 \cf4  \cf5 Pet\cf4 : \cf7 Animal\cf4  \{ \cf8 // support inheritance like a class\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 name\cf4 : \cf7 String\cf4  \{
\f0\b \cf2 get
\f1\b0 \cf4  
\f0\b \cf2 set
\f1\b0 \cf4 \}\
\}\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Dog\cf4 : \cf7 Pet\cf4  \{\
    \cf8 //we must have the var name & noOfLegs in the Dog class\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 name\cf4 : \cf7 String\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 noOfLegs\cf4 : \cf7 Int\cf4 \
    \
    
\f0\b \cf2 init
\f1\b0 \cf4 (name: \cf7 String\cf4 , noOfLegs: \cf7 Int\cf4 ) \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .name = name\
        
\f0\b \cf2 self
\f1\b0 \cf4 .noOfLegs = noOfLegs\
    \}\
\}\
\

\f0\b \cf2 let
\f1\b0 \cf4  \cf6 mydog\cf4  = Dog(name:\cf9 "Daisy"\cf4 , noOfLegs:\cf10 4\cf4 )\
print (mydog.name)\
print (mydog.noOfLegs)\
}