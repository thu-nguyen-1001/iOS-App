{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red155\green35\blue147;\red255\green255\blue255;\red0\green0\blue0;
\red83\green101\blue121;\red92\green38\blue153;\red50\green109\blue116;\red196\green26\blue22;\red28\green0\blue207;
\red57\green0\blue160;}
{\*\expandedcolortbl;;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c32401\c39745\c47507;\csgenericrgb\c35922\c14825\c60191;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c11000\c0\c81000;
\csgenericrgb\c22454\c0\c62803;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0  
\f1\b \cf2 \cb3 import
\f2\b0 \cf4  UIKit\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf4 \

\f3\i \cf5 // Dictionary is a value type in Swift  (Array and Stirng are value types in Swift too)
\f2\i0 \cf4 \
\

\f3\i \cf5 //create the Swift Dictionary with nothing, and set the types
\f2\i0 \cf4 \
\

\f3\i \cf5 // (String will be Key, and any object will be the value
\f2\i0 \cf4 \
\

\f1\b \cf2 var
\f2\b0 \cf4  someDict = [\cf6 String\cf4  : 
\f1\b \cf2 Any
\f2\b0 \cf4 ]()  
\f3\i \cf5 //could use Any or AnyObject here
\f2\i0 \cf4 \

\f3\i \cf5 // note: AnyObject is an instance of Any classes, while Any is an instance of Any classes and others
\f2\i0 \cf4 \

\f3\i \cf5 // like  struct, enum, etc.
\f2\i0 \cf4 \
\

\f3\i \cf5 // add a key and value
\f2\i0 \cf4 \
\
\cf7 someDict\cf4 [\cf8 "Ex wives"\cf4 ] = \cf9 2\cf4  
\f1\b \cf2 as
\f2\b0 \cf4  
\f1\b \cf2 Any
\f2\b0 \cf4 \
\
\cf10 print\cf4  (\cf7 someDict\cf4 )\
\

\f3\i \cf5 // Exercise:
\f2\i0 \cf4 \

\f3\i \cf5 //declare  var names: [String] = ["Kathy", "Jennifer"]
\f2\i0 \cf4 \

\f3\i \cf5 // Then assign names to be the value associated with thw kwy "Ex wivers"
\f2\i0 \cf4 \
\
\

\f3\i \cf5 // add another key and value
\f2\i0 \cf4 \
\
\cf7 someDict\cf4 [\cf8 "Current wives"\cf4 ] = \cf9 1\cf4  
\f1\b \cf2 as
\f2\b0 \cf4  \cf6 AnyObject\cf4 \
\
\cf10 print\cf4  (\cf7 someDict\cf4 )\
\

\f1\b \cf2 var
\f2\b0 \cf4  anotherDict = \cf7 someDict\cf4 \
\cf7 anotherDict\cf4 [\cf8 "Current wives"\cf4 ] = \cf9 0\cf4  
\f1\b \cf2 as
\f2\b0 \cf4  
\f1\b \cf2 Any
\f2\b0 \cf4 \
\
\cf10 print\cf4  (\cf8 "someDict:"\cf4 ,\cf7 someDict\cf4 )\
\cf10 print\cf4  (\cf8 "anotherDict:"\cf4 ,\cf7 anotherDict\cf4 )\
\
\

\f3\i \cf5 //remove Current wives. Oh well.
\f2\i0 \cf4 \
\
\cf7 someDict\cf4 .\cf10 removeValue\cf4 (forKey: \cf8 "Current wives"\cf4 )\
\
\cf10 print\cf4  (\cf7 someDict\cf4 )\
\

\f3\i \cf5 //changes ex wives to 6
\f2\i0 \cf4 \
\
\
\cf7 someDict\cf4 [\cf8 "Ex wives"\cf4 ] = \cf9 3\cf4  
\f1\b \cf2 as
\f2\b0 \cf4  \cf6 AnyObject\cf4 \
\
\cf10 print\cf4  (\cf7 someDict\cf4 )\
\

\f3\i \cf5 // remove all
\f2\i0 \cf4 \
\
\cf7 someDict\cf4 .\cf10 removeAll\cf4 ()\
}