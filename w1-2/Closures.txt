//: Playground - noun: a place where people can play

import UIKit

// Global Closure (a.k.a function)
func timesTenFunc(number: Int) -> Int { return number * 10 }

// Normal Closure
var timesTenClosure: (Int) -> Int = { $0 * 10 }

// Testing
timesTenFunc(number: 10) // 100
timesTenClosure(10) // 100


//-------------------------------------------------------------
// using a closure as a parameter

func sum(from: Int, to: Int, closure: (Int) -> Int) -> Int {
    var sum = 0
    for i in from...to {
        sum += closure(i)
    }
    return sum
}

//call the sum function using Mormal Closure in different ways to get the same result
print(sum(from: 0, to: 10, closure: timesTenFunc))
print(sum(from: 0, to: 10, closure: timesTenClosure))
print(sum(from: 0, to: 10, closure: { (number) in return number * 10 }))
print(sum(from: 0, to: 10, closure: { $0 * 10 }))

//call the sum function using Trailing Closure in different ways to get the same result

print(sum(from: 0, to: 10) { (number) in
    return number * 10
})

print(sum(from: 0, to: 10) { return $0 * 10})

print(sum(from: 0, to: 10) { $0 * 10 })
