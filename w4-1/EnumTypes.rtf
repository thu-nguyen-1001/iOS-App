{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red155\green35\blue147;\red255\green255\blue255;\red0\green0\blue0;
\red11\green79\blue121;\red57\green0\blue160;\red15\green104\blue160;\red28\green0\blue207;\red28\green70\blue74;
\red50\green109\blue116;\red93\green108\blue121;\red108\green54\blue169;\red196\green26\blue22;}
{\*\expandedcolortbl;;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c10981\c27276\c28869;
\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c42190\c21278\c66379;\csgenericrgb\c77000\c10200\c8600;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \cb3 import
\f1\b0 \cf4  UIKit\
\

\f0\b \cf2 enum
\f1\b0 \cf4  \cf5 Rank\cf4 : \cf6 Int\cf4  \{\
    
\f0\b \cf2 case
\f1\b0 \cf4  \cf7 Ace\cf4  = \cf8 1\cf4 \
    
\f0\b \cf2 case
\f1\b0 \cf4  \cf7 Two\cf4  = \cf8 2\cf4 \
    
\f0\b \cf2 case
\f1\b0 \cf4  \cf7 Three\cf4  = \cf8 3\cf4 \
\}\
\

\f0\b \cf2 let
\f1\b0 \cf4  \cf7 card1\cf4  = \cf9 Rank\cf4 .\cf10 Ace\cf4 .\cf10 rawValue\cf4  \cf11 //1   note: card1 is of type Int, not of type Rank\cf4 \

\f0\b \cf2 let
\f1\b0 \cf4  \cf7 card2\cf4  = \cf9 Rank\cf4 .\cf10 Two\cf4 .\cf10 rawValue\cf4  \cf11 //2\cf4 \
\
\cf11 //or if you didn't really need the rawValue's from the cards, you could make a variable just equal .Ace , for example...\cf4 \
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf7 card3\cf4 :\cf9 Rank\cf4  = .\cf10 Ace\cf4 \

\f0\b \cf2 var
\f1\b0 \cf4  \cf7 card4\cf4 :\cf9 Rank\cf4  = .\cf10 Three\cf4 \
\

\f0\b \cf2 if
\f1\b0 \cf4  ( \cf10 card3\cf4  == \cf10 card4\cf4 ) \{    \cf11 // card3 cannot compare with card1 because they are of different types\cf4 \
    \
    \cf12 print\cf4 (\cf13 "match"\cf4 )\
    \
\} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
    \
    \cf12 print\cf4  (\cf13 "not a match"\cf4 )\
\}\
\
\cf11 //-------------------------------------------------------------------------------\cf4 \
\
\

\f0\b \cf2 enum
\f1\b0 \cf4  \cf5 Rank1\cf4 : \cf6 Int\cf4  \{\
    \
    
\f0\b \cf2 case
\f1\b0 \cf4  \cf7 Ace\cf4  = \cf8 1\cf4 , \cf7 Two\cf4 , \cf7 Three\cf4 , \cf7 Four\cf4 , \cf7 Five\cf4 , \cf7 Six\cf4 , \cf7 Seven\cf4 , \cf7 Eight\cf4 , \cf7 Nine\cf4 , \cf7 Ten\cf4 \
    
\f0\b \cf2 case
\f1\b0 \cf4  \cf7 Jack\cf4 , \cf7 Queen\cf4 , \cf7 King\cf4 \
    \
\}\
\

\f0\b \cf2 let
\f1\b0 \cf4  \cf7 card5\cf4  = \cf9 Rank1\cf4 .\cf10 King\cf4 \
\cf12 print\cf4  ( \cf10 card5\cf4 .\cf10 rawValue\cf4  ) \cf11 //would print 13\cf4 \
\

\f0\b \cf2 switch
\f1\b0 \cf4  \cf10 card5\cf4  \{\
    
\f0\b \cf2 case
\f1\b0 \cf4  \cf9 Rank1\cf4 .\cf10 Ace\cf4 :\
        \cf12 print\cf4 (\cf13 "Ace"\cf4 )\
    
\f0\b \cf2 case
\f1\b0 \cf4  .\cf10 Two\cf4 :\
        \cf12 print\cf4  (\cf13 "Two"\cf4 )\
    
\f0\b \cf2 case
\f1\b0 \cf4  .\cf10 Three\cf4 :\
        \cf12 print\cf4  (\cf13 "Three"\cf4 )\
    
\f0\b \cf2 case
\f1\b0 \cf4  .\cf10 Four\cf4 :\
        \cf12 print\cf4  (\cf13 "Four"\cf4 )\
    
\f0\b \cf2 case
\f1\b0 \cf4  .\cf10 Five\cf4 :\
        \cf12 print\cf4  (\cf13 "Five"\cf4 )\
    
\f0\b \cf2 case
\f1\b0 \cf4  .\cf10 Six\cf4 :\
        \cf12 print\cf4  (\cf13 "Six"\cf4 )\
    
\f0\b \cf2 case
\f1\b0 \cf4  .\cf10 Seven\cf4 :\
        \cf12 print\cf4  (\cf13 "Seven"\cf4 )\
    
\f0\b \cf2 case
\f1\b0 \cf4  .\cf10 Eight\cf4 :\
        \cf12 print\cf4  (\cf13 "Eight"\cf4 )\
    
\f0\b \cf2 case
\f1\b0 \cf4  .\cf10 Nine\cf4 :\
        \cf12 print\cf4  (\cf13 "Nine"\cf4 )\
    
\f0\b \cf2 case
\f1\b0 \cf4  .\cf10 Ten\cf4 :\
        \cf12 print\cf4  (\cf13 "Ten"\cf4 )\
    
\f0\b \cf2 case
\f1\b0 \cf4  .\cf10 Jack\cf4 :\
        \cf12 print\cf4  (\cf13 "Jack"\cf4 )\
    
\f0\b \cf2 case
\f1\b0 \cf4  .\cf10 Queen\cf4 :\
        \cf12 print\cf4  (\cf13 "Queen"\cf4 )\
    
\f0\b \cf2 case
\f1\b0 \cf4  .\cf10 King\cf4 :\
        \cf12 print\cf4  (\cf13 "King"\cf4 )\
\}\
\
\cf11 //--------------------------------------------------------------------------\cf4 \
\cf11 // Exercise: Rewrite the switch statement above using nested if-else statement instead.\cf4 \
\cf11 //---------------------------------------------------------------------------------\cf4 \
\

\f0\b \cf2 enum
\f1\b0 \cf4  \cf5 Rank2\cf4 : \cf6 Int\cf4  \{\
    \
    
\f0\b \cf2 case
\f1\b0 \cf4  \cf7 Ace\cf4  = \cf8 -5\cf4 , \cf7 Two\cf4 , \cf7 Three\cf4 , \cf7 Four\cf4 , \cf7 Five\cf4 , \cf7 Six\cf4 , \cf7 Seven\cf4 , \cf7 Eight\cf4 , \cf7 Nine\cf4 , \cf7 Ten\cf4 \
    
\f0\b \cf2 case
\f1\b0 \cf4  \cf7 Jack\cf4 , \cf7 Queen\cf4 , \cf7 King\cf4 \
\}\
\

\f0\b \cf2 let
\f1\b0 \cf4  \cf7 card6\cf4  = \cf9 Rank2\cf4 .\cf10 King\cf4 \
\
\cf12 print\cf4  ( \cf10 card6\cf4 .\cf10 rawValue\cf4  ) \cf11 //would print 7\cf4 \
}