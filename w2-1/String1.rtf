{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red155\green35\blue147;\red255\green255\blue255;\red0\green0\blue0;
\red83\green101\blue121;\red196\green26\blue22;\red57\green0\blue160;\red50\green109\blue116;\red92\green38\blue153;
\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c32401\c39745\c47507;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c35922\c14825\c60191;
\csgenericrgb\c11000\c0\c81000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \cb3 import
\f1\b0 \cf4  UIKit\
\

\f2\i \cf5 // String creation using String literal
\f1\i0 \cf4 \

\f0\b \cf2 var
\f1\b0 \cf4  stringA = \cf6 "Hello, Swift!"\cf4 \
\cf7 print\cf4 ( \cf8 stringA\cf4  )\
\

\f2\i \cf5 // String creation using String instance
\f1\i0 \cf4 \

\f0\b \cf2 var
\f1\b0 \cf4  stringB = \cf9 String\cf4 (\cf6 "Hello, Swift!"\cf4 )\
\cf7 print\cf4 ( \cf8 stringB\cf4  )\
\

\f2\i \cf5 //Multiple line string
\f1\i0 \cf4 \
\

\f0\b \cf2 let
\f1\b0 \cf4  stringC = \cf6 """\cf4 \
\cf6 This is an\cf4 \
\cf6 example of multiple Line\cf4 \
\cf6 string literal.\cf4 \
\
\cf6 Bye!\cf4 \
\cf6 """\cf4 \
\cf7 print\cf4 (\cf8 stringC\cf4 )\
\
\

\f2\i \cf5 // Empty string creation using String literal
\f1\i0 \cf4 \

\f0\b \cf2 var
\f1\b0 \cf4  stringD = \cf6 ""\cf4 \
\

\f0\b \cf2 if
\f1\b0 \cf4  \cf8 stringD\cf4 .\cf9 isEmpty\cf4  \{\
    \cf7 print\cf4 ( \cf6 "stringD is empty"\cf4  )\
\} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
    \cf7 print\cf4 ( \cf6 "stringD is not empty"\cf4  )\
\}\
\

\f2\i \cf5 // Empty string creation using String instance
\f1\i0 \cf4 \

\f0\b \cf2 let
\f1\b0 \cf4  stringE = \cf9 String\cf4 ()\
\

\f0\b \cf2 if
\f1\b0 \cf4  \cf8 stringE\cf4 .\cf9 isEmpty\cf4  \{\
    \cf7 print\cf4 ( \cf6 "stringE is empty"\cf4  )\
\} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
    \cf7 print\cf4 ( \cf6 "stringE is not empty"\cf4  )\
\}\
\

\f2\i \cf5 //Single character String can be declared as Character type
\f1\i0 \cf4 \

\f0\b \cf2 let
\f1\b0 \cf4  char1: \cf9 Character\cf4  = \cf6 "A"\cf4 \

\f0\b \cf2 let
\f1\b0 \cf4  char2: \cf9 Character\cf4  = \cf6 "\\0"\cf4    
\f2\i \cf5 // null character
\f1\i0 \cf4 \

\f0\b \cf2 let
\f1\b0 \cf4  char3: \cf9 Character\cf4  = \cf6 "\\t"\cf4    
\f2\i \cf5 // tab character
\f1\i0 \cf4 \

\f2\i \cf5 /*
\f1\i0 \cf4 \

\f2\i \cf5 let char3: Character = "AB"   // error!
\f1\i0 \cf4 \

\f2\i \cf5 */
\f1\i0 \cf4 \
\cf7 print\cf4 (\cf6 "Value of char1 : \cf4 \\\cf6 (\cf8 char1\cf6 )"\cf4 )\
\cf7 print\cf4 (\cf6 "Value of char2 : \cf4 \\\cf6 (\cf8 char2\cf6 )"\cf4 )\
\cf7 print\cf4 (\cf6 "Hello,\cf4 \\\cf6 (\cf8 char3\cf6 )world"\cf4 )\
\

\f2\i \cf5 //String Concatenation
\f1\i0 \cf4 \

\f0\b \cf2 let
\f1\b0 \cf4  constA = \cf6 "Hello,"\cf4 \

\f0\b \cf2 let
\f1\b0 \cf4  constB = \cf6 "World!"\cf4 \
\

\f0\b \cf2 var
\f1\b0 \cf4  newstring1 = \cf8 constA\cf4  + \cf8 constB\cf4 \
\

\f0\b \cf2 var
\f1\b0 \cf4  newstring2 = \cf8 constA\cf4 \
\cf8 newstring2\cf4  += \cf8 constB\cf4 \
\

\f0\b \cf2 var
\f1\b0 \cf4  newstring3 = \cf6 ""\cf4 \
\cf8 newstring3\cf4 .\cf7 append\cf4 (\cf8 constA\cf4 )\
\cf8 newstring3\cf4 .\cf7 append\cf4 (\cf8 constB\cf4 )\
\
\cf7 print\cf4 (\cf8 newstring1\cf4 )\
\cf7 print\cf4 (\cf8 newstring2\cf4 )\
\cf7 print\cf4 (\cf8 newstring3\cf4 )\
\

\f2\i \cf5 //iterating the String character by character
\f1\i0 \cf4 \
\

\f0\b \cf2 for
\f1\b0 \cf4  ch 
\f0\b \cf2 in
\f1\b0 \cf4  \cf8 newstring1\cf4  \{\
    \cf7 print\cf4  (ch)\
\}\
\

\f0\b \cf2 for
\f1\b0 \cf4  ch 
\f0\b \cf2 in
\f1\b0 \cf4  \cf8 newstring1\cf4  \{\
    \cf7 print\cf4  (ch, terminator: \cf6 ""\cf4 )\
\}\
\cf7 print\cf4 ()\
\

\f2\i \cf5 //String.startIndex, String.endIndex, String.index and range
\f1\i0 \cf4 \
\

\f0\b \cf2 var
\f1\b0 \cf4  str = \cf6 "Hello, playground"\cf4 \
\

\f2\i \cf5 // refering to the first character of the String
\f1\i0 \cf4 \
\cf8 str\cf4 [\cf8 str\cf4 .\cf9 startIndex\cf4 ] 
\f2\i \cf5 // H
\f1\i0 \cf4 \

\f2\i \cf5 /*
\f1\i0 \cf4 \

\f2\i \cf5  str[str.endIndex]   // error: after last character
\f1\i0 \cf4 \

\f2\i \cf5  */
\f1\i0 \cf4 \
\
\cf8 str\cf4 [\cf8 str\cf4 .\cf7 index\cf4 (before: \cf8 str\cf4 .\cf9 endIndex\cf4 )] 
\f2\i \cf5 // d
\f1\i0 \cf4 \

\f2\i \cf5 //exercise: referring to the second character using startIndex and "after" argument label
\f1\i0 \cf4 \
\
\cf8 str\cf4 [\cf8 str\cf4 .\cf7 index\cf4 (\cf8 str\cf4 .\cf9 startIndex\cf4 , offsetBy: \cf10 7\cf4 )]   
\f2\i \cf5 // p
\f1\i0 \cf4 \

\f2\i \cf5 //exercise: refering to the character 7 characters from endIndex, should be the character "y"
\f1\i0 \cf4 \
\

\f2\i \cf5 // make sure that offsetBy value cannot exceed the limitedBy value
\f1\i0 \cf4 \

\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  index = \cf8 str\cf4 .\cf7 index\cf4 (\cf8 str\cf4 .\cf9 startIndex\cf4 , offsetBy: \cf10 7\cf4 , limitedBy: \cf8 str\cf4 .\cf9 endIndex\cf4 ) \{\
    \cf8 str\cf4 [index]  
\f2\i \cf5 // p
\f1\i0 \cf4 \
\}\
\

\f2\i \cf5 // create a range
\f1\i0 \cf4 \

\f0\b \cf2 let
\f1\b0 \cf4  range =  \cf8 str\cf4 .\cf9 startIndex\cf4 ..<\cf8 str\cf4 .\cf9 endIndex\cf4 \
\cf7 print\cf4 (\cf8 str\cf4 [\cf8 range\cf4 ])  
\f2\i \cf5 // "Hello, playground"
\f1\i0 \cf4 \
}