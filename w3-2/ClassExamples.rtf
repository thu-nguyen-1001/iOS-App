{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red155\green35\blue147;\red255\green255\blue255;\red0\green0\blue0;
\red11\green79\blue121;\red15\green104\blue160;\red28\green0\blue207;\red57\green0\blue160;\red93\green108\blue121;
\red50\green109\blue116;\red196\green26\blue22;\red28\green70\blue74;\red108\green54\blue169;}
{\*\expandedcolortbl;;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c36526\c42188\c47515;
\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c10981\c27276\c28869;\csgenericrgb\c42190\c21278\c66379;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \cb3 import
\f1\b0 \cf4  UIKit\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Example\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 a\cf4  = \cf7 0\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 b\cf4 : \cf8 String\cf4 \
    \
    
\f0\b \cf2 init
\f1\b0 \cf4 (a: \cf8 Int\cf4 ) \{ \cf9 // Constructor\cf4 \
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf10 a\cf4  = a\
        \cf10 b\cf4  = \cf11 "name"\cf4                   \cf9 // An error if a declared property isn't initialized\cf4 \
    \}\
\}\
\
\cf9 //External param names are required...\cf4 \
\

\f0\b \cf2 let
\f1\b0 \cf4  \cf6 eg\cf4  = \cf12 Example\cf4 (a: \cf7 1\cf4 )\
\cf13 print\cf4 (\cf10 eg\cf4 .\cf10 a\cf4 )              \cf9 // 1\cf4 \
\
\cf9 //---------------------------------------------------------------------\cf4 \
\
\cf9 //Unless the params are declared with leading underscores.\cf4 \
\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Example2\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 a\cf4  = \cf7 0\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 b\cf4  = \cf7 0\cf4 \
    \
    
\f0\b \cf2 init
\f1\b0 \cf4 (
\f0\b \cf2 _
\f1\b0 \cf4  a: \cf8 Int\cf4 , 
\f0\b \cf2 _
\f1\b0 \cf4  b: \cf8 Int\cf4 ) \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf10 a\cf4  = a\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf10 b\cf4  = b\
    \}\
\}\
\

\f0\b \cf2 let
\f1\b0 \cf4  \cf6 eg2\cf4  = \cf12 Example2\cf4 (\cf7 1\cf4 , \cf7 2\cf4 )\
\cf13 print\cf4 (\cf10 eg2\cf4 .\cf10 a\cf4 )            \cf9 // 1\cf4 \
\cf13 print\cf4 (\cf10 eg2\cf4 .\cf10 b\cf4 )            \cf9 // 2\cf4 \
\
\
\cf9 //------------------------------------------------------------------------\cf4 \
\cf9 // Lazy properties' initial value aren't initialized until the first time the\cf4 \
\cf9 // property is accessed.\cf4 \
\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Podcast\cf4  \{\
    
\f0\b \cf2 lazy
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 episode\cf4  = \cf12 Episode\cf4 () \cf9 // `var` declaration is required.\cf4 \
\}\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Episode\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 audio\cf4  = \cf11 "somefile.mp3"\cf4 \
\}\
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 podcast\cf4  = \cf12 Podcast\cf4 ()          \cf9 // episode has not been initialized yet.\cf4 \
\cf13 print\cf4 (\cf10 podcast\cf4 .\cf10 episode\cf4 .\cf10 audio\cf4 )   \cf9 // somefile.mp3\cf4 \
\
\cf9 //-------------------------------------------------------------------------\cf4 \
\cf9 // Computed properties don't store a value. Instead, getters / setters\cf4 \
\cf9 // are provided to retrieve and set _other_ properties.\cf4 \
\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Window\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 x\cf4  = \cf7 0.0\cf4 , \cf6 y\cf4  = \cf7 0.0\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 width\cf4  = \cf7 100.0\cf4 , \cf6 height\cf4  = \cf7 100.0\cf4 \
    \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 center\cf4 : (\cf8 Double\cf4 , \cf8 Double\cf4 ) \{\
        
\f0\b \cf2 get
\f1\b0 \cf4  \{\
            
\f0\b \cf2 return
\f1\b0 \cf4  (\cf10 width\cf4  \cf13 /\cf4  \cf7 2\cf4 , \cf10 height\cf4  \cf13 /\cf4  \cf7 2\cf4 )\
        \}\
     \cf9 /*\cf4 \
\cf9         set(newVal) \{\cf4 \
\cf9             x = newVal.0 - (width / 2)\cf4 \
\cf9             y = newVal.1 - (height / 2)\cf4 \
\cf9         \}\cf4 \
\cf9      */\cf4 \
        \cf9 // or like this using newValue\cf4 \
        
\f0\b \cf2 set
\f1\b0 \cf4  \{\
            \cf10 x\cf4  = newValue.\cf7 0\cf4  \cf13 -\cf4  (\cf10 width\cf4  \cf13 /\cf4  \cf7 2\cf4 )\
            \cf10 y\cf4  = newValue.\cf7 1\cf4  \cf13 -\cf4  (\cf10 height\cf4  \cf13 /\cf4  \cf7 2\cf4 )\
        \}\
    \}\
\}\
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 win\cf4  = \cf12 Window\cf4 ()\
\cf13 print\cf4 (\cf10 win\cf4 .\cf10 center\cf4 )               \cf9 // (50.0, 50.0)\cf4 \
\cf10 win\cf4 .\cf10 center\cf4  = (\cf7 0.0\cf4 , \cf7 10.0\cf4 )\
\cf13 print\cf4 (\cf10 win\cf4 .\cf10 x\cf4 )                    \cf9 // -50.0\cf4 \
\cf13 print\cf4 (\cf10 win\cf4 .\cf10 y\cf4 )                    \cf9 // -40.0\cf4 \
\
\
\
\cf9 //----------------------------------------------------------------------------------\cf4 \
\cf9 // Read-only computed properties\cf4 \
\cf9 // No setter defined for each property\cf4 \
\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Song\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 title\cf4  = \cf11 ""\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 duration\cf4  = \cf7 0.0\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 metaInfo\cf4 : [\cf8 String\cf4 :\cf8 String\cf4 ] \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  [\
            \cf11 "title"\cf4 : 
\f0\b \cf2 self
\f1\b0 \cf4 .\cf10 title\cf4 ,\
            \cf11 "duration"\cf4 : \cf8 NSString\cf4 (format: \cf11 "%.2f"\cf4 , 
\f0\b \cf2 self
\f1\b0 \cf4 .\cf10 duration\cf4 ) 
\f0\b \cf2 as
\f1\b0 \cf4  \cf8 String\cf4 ,\
        ]\
    \}\
\}\
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 song\cf4  = \cf12 Song\cf4 ()\
\cf10 song\cf4 .\cf10 title\cf4  = \cf11 "Rootshine Revival"\cf4 \
\cf10 song\cf4 .\cf10 duration\cf4  = \cf7 2.01\cf4 \
\cf13 print\cf4 (\cf10 song\cf4 .\cf10 metaInfo\cf4 [\cf11 "title"\cf4 ]!)    \cf9 // Rootshine Revival\cf4 \
\cf13 print\cf4 (\cf10 song\cf4 .\cf10 metaInfo\cf4 [\cf11 "duration"\cf4 ]!) \cf9 // 2.01\cf4 \
\
\cf9 //----------------------------------------------------------------------------------\cf4 \
\cf9 // Property observers can be added onto any properties (including inherited) except for lazy computed props.\cf4 \
\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Website\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 visitors\cf4 : \cf8 Int\cf4  = \cf7 2\cf4  \{             \cf9 // An explicit type is required\cf4 \
        
\f0\b \cf2 willSet
\f1\b0 \cf4  (newVisitorCount) \{          \cf9 // Called before the prop is set\cf4 \
           \cf9 // assigns the value of newVisitorCount to visitors property automatically\cf4 \
        \}\
        
\f0\b \cf2 didSet
\f1\b0 \cf4  \{                            \cf9 // Called after a new val is set\cf4 \
            \cf13 print\cf4 (\cf10 visitors\cf4  \cf13 -\cf4  oldValue)    \cf9 // oldValue is magically defined\cf4 \
        \}\
    \}\
\}\
\
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 site\cf4  = \cf12 Website\cf4 ()\
\cf10 site\cf4 .\cf10 visitors\cf4  = \cf7 3\cf4 \
\cf13 print\cf4 (\cf10 site\cf4 .\cf10 visitors\cf4 )                 \cf9 // 1\cf4 \
\
\
\cf9 //----------------------------------------------------------------------------------\cf4 \
\cf9 // Type Properties AKA class variables\cf4 \
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Body\cf4  \{\
    \cf9 /*    class var age = 0     // error: stored class variables not yet supported */\cf4 \
    
\f0\b \cf2 static
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 age\cf4 : \cf8 Int\cf4  = \cf7 0\cf4     \cf9 // use static variable instead because there is no need \cf4 \
                               \cf9 //to "override" a stored class variable\cf4 \
    \cf9 // Computed type property using class variable and it can be overriden by subclasses\cf4 \
    
\f0\b \cf2 class
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 size\cf4 : \cf8 Int\cf4  \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf7 10\cf4 \
    \}\
\}\
\cf13 print\cf4 (\cf12 Body\cf4 .\cf10 size\cf4 )                     \cf9 // 10\cf4 \
\
\cf9 //-----------------------------------------------------------------------------------\cf4 \
\cf9 // Type Methods AKA class methods\cf4 \
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Banana\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 color\cf4  = \cf11 "green"\cf4 \
    
\f0\b \cf2 class
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf6 genus\cf4 () -> \cf8 String\cf4  \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf11 "Musa"\cf4 \
    \}\
\}\
\cf13 print\cf4 (\cf12 Banana\cf4 .\cf10 genus\cf4 ())                \cf9 // Musa\cf4 \
\
\
\cf9 //---------------------------------------------------------------------------------------\cf4 \
\cf9 // Inheritance - Swift classes do not inherit from a universal base class.\cf4 \
\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Bicycle\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 tireWidth\cf4 : \cf8 Double\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 topSpeed\cf4 : \cf8 Double\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 name\cf4 : \cf8 String\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 gears\cf4 : \cf8 Int\cf4 \
    \cf9 // Marking a method/property with `@final` prevents it from being overridden\cf4 \
    
\f0\b \cf2 final
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 color\cf4  = \cf11 "green"\cf4 \
    \
    
\f0\b \cf2 init
\f1\b0 \cf4 () \{\
        \cf10 tireWidth\cf4  = \cf7 30.5\cf4 \
        \cf10 topSpeed\cf4  = \cf7 10.0\cf4 \
        \cf10 name\cf4  = \cf11 "regular ol' bike"\cf4 \
        \cf10 gears\cf4  = \cf7 3\cf4 \
    \}\
    \
    
\f0\b \cf2 func
\f1\b0 \cf4  \cf6 go\cf4 (
\f0\b \cf2 _
\f1\b0 \cf4  distance: \cf8 Double\cf4 ) \{\
        \cf13 print\cf4 (\cf11 "Went \cf4 \\(distance)\cf11  at a top speed of \cf4 \\(\cf10 topSpeed\cf4 )\cf11  in my \cf4 \\(\cf10 name\cf4 )\cf11 "\cf4 )\
    \}\
\}\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 MountainBike\cf4  : \cf12 Bicycle\cf4  \{\
    \cf9 /* var tireWidth = 64.0 // Cannot override property in the declaration */\cf4 \
    
\f0\b \cf2 override
\f1\b0 \cf4  
\f0\b \cf2 init
\f1\b0 \cf4 () \{\
        
\f0\b \cf2 super
\f1\b0 \cf4 .\cf12 init\cf4 ()\
        \
        \cf10 tireWidth\cf4  = \cf7 64.0\cf4 \
        \cf10 name\cf4  = \cf11 "mountain bike"\cf4 \
        \cf10 gears\cf4  = \cf7 12\cf4 \
    \}\
    \cf9 // Override parent's methods via `override` keyword\cf4 \
    
\f0\b \cf2 override
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf6 go\cf4 (
\f0\b \cf2 _
\f1\b0 \cf4  distance: \cf8 Double\cf4 ) \{\
        
\f0\b \cf2 super
\f1\b0 \cf4 .\cf10 go\cf4 (distance)\
        \cf13 print\cf4 (\cf11 "Did \cf4 \\(distance)\cf11  on a mountain bike"\cf4 )\
    \}\
    \
    \cf9 // A getter/setter override can _any_ inherited property.\cf4 \
    
\f0\b \cf2 override
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 topSpeed\cf4 : \cf8 Double\cf4  \{\
        
\f0\b \cf2 get
\f1\b0 \cf4  \{\
            
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 super
\f1\b0 \cf4 .\cf10 topSpeed\cf4  \cf13 -\cf4  \cf7 4.0\cf4 \
        \}\
        
\f0\b \cf2 set
\f1\b0 \cf4  \{\
            
\f0\b \cf2 super
\f1\b0 \cf4 .\cf10 topSpeed\cf4  = newValue\
        \}\
    \}\
    \
    \cf9 // Property observer\cf4 \
    
\f0\b \cf2 override
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 gears\cf4 : \cf8 Int\cf4  \{\
        
\f0\b \cf2 didSet
\f1\b0 \cf4  \{\
            \cf13 print\cf4 (\cf11 "Gears was changed to \cf4 \\(\cf10 gears\cf4 )\cf11 "\cf4 )\
        \}\
    \}\
\}\
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 mountainBike\cf4  = \cf12 MountainBike\cf4 ()              \cf9 // Gears was changed to 12\cf4 \
\cf10 mountainBike\cf4 .\cf10 topSpeed\cf4  = \cf7 6.0\cf4 \
\cf13 print\cf4 (\cf10 mountainBike\cf4 .\cf10 topSpeed\cf4 )                 \cf9 // 2.0\cf4 \
\cf10 mountainBike\cf4 .\cf10 go\cf4 (\cf7 12.0\cf4 )                          \cf9 // Went 12.0 at a top speed of 10.0 in my mountain bike\cf4 \
\
\cf9 //------------------------------------------------------------------------------\cf4 \
\cf9 // 'Convenience' initializers overload empty initializers that populate the params in 'designated' initializers.\cf4 \
\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 iOS\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 version\cf4 : \cf8 String\cf4 \
    \
    
\f0\b \cf2 init
\f1\b0 \cf4 (version: \cf8 String\cf4 ) \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf10 version\cf4  = version\
    \}\
    \
    
\f0\b \cf2 convenience
\f1\b0 \cf4  
\f0\b \cf2 init
\f1\b0 \cf4 () \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf12 init\cf4 (version: \cf11 "8.0.0"\cf4 )\
    \}\
\}\
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 os\cf4  = \cf12 iOS\cf4 ()\
\cf13 print\cf4 (\cf10 os\cf4 .\cf10 version\cf4 )                          \cf9 // 8.0.0\cf4 \
\
\cf9 //---------------------------------------------------------------------------------\cf4 \
\cf9 // ARC and reference cycles - Strong reference cycles happen when two objects\cf4 \
\cf9 // hold strong references to each other so that neither\cf4 \
\cf9 // can be deallocated (\'e0 la memory leaks in garbage collected langs)\cf4 \
\cf9 // Strong references can be resolved by declaring\cf4 \
\cf9 // references as weak or unowned\cf4 \
\
\cf9 // Use a weak reference whenever it's valid for the reference\cf4 \
\cf9 // to be nil at any point. These are optional types.\cf4 \
\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Driver\cf4  \{\
    
\f0\b \cf2 weak
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 car\cf4 : \cf12 Car\cf4 ?\
    \
    
\f0\b \cf2 deinit
\f1\b0 \cf4  \{\
        \cf13 print\cf4 (\cf11 "Driver deinitialized"\cf4 )\
    \}\
\}\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Car\cf4  \{\
    
\f0\b \cf2 weak
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 driver\cf4 : \cf12 Driver\cf4 ? \cf9 // Strong reference to driver.\cf4 \
    \
    
\f0\b \cf2 deinit
\f1\b0 \cf4  \{\
        \cf13 print\cf4 (\cf11 "Car deinitialized"\cf4 )\
    \}\
\}\
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 driver\cf4 : \cf12 Driver\cf4 ?\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 car\cf4 : \cf12 Car\cf4 ?\
\
\cf10 driver\cf4  = \cf12 Driver\cf4 ()\
\cf10 car\cf4  = \cf12 Car\cf4 ()\
\cf10 driver\cf4 !.\cf10 car\cf4  = \cf10 car\cf4 \
\cf10 car\cf4 !.\cf10 driver\cf4  = \cf10 driver\cf4 \
\
\cf10 driver\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4                \cf9 // No more strong references to driver.\cf4 \
\cf10 car\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4                   \cf9 // No more strong references to car.\cf4 \
\
\cf9 //--------------------------------------------------------------------\cf4 \
\cf9 // Unowned references are like weak references except they always\cf4 \
\cf9 // refer to a value, so they're non-nil.\cf4 \
\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Artist\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 instrument\cf4 : \cf12 Instrument\cf4 ?  \cf9 // Strong reference to instrument.\cf4 \
\}\
\

\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Instrument\cf4  \{\
    
\f0\b \cf2 unowned
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  \cf6 artist\cf4 : \cf12 Artist\cf4    \cf9 // Unowned reference to artist.\cf4 \
    
\f0\b \cf2 init
\f1\b0 \cf4  (artist: \cf12 Artist\cf4 ) \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf10 artist\cf4  = artist\
    \}\
\}\
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 artist\cf4 : \cf12 Artist\cf4 ?\
\cf10 artist\cf4  = \cf12 Artist\cf4 ()\
\cf10 artist\cf4 !.\cf10 instrument\cf4  = \cf12 Instrument\cf4 (artist: \cf10 artist\cf4 !)\
\
\cf10 artist\cf4  = 
\f0\b \cf2 nil
\f1\b0 \cf4         \cf9 // Both objects are deallocated since there are no more strong references.\cf4 \
\
\cf9 //---------------------------------------------------------------------------------------\cf4 \
\cf9 // Access control in Swift is very much package-based.\cf4 \
\cf9 // private: Can only be accessed from the same source file that it's defined\cf4 \
\cf9 // internal: Can be accessed anywhere in the target it's defined\cf4 \
\cf9 // public: Accessible anywhere in the target and anywhere its module is imported\cf4 \
\cf9 // Defaults to internal if not explicitly declared.\cf4 \
\

\f0\b \cf2 extension
\f1\b0 \cf4  \cf8 String\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 ns\cf4 : \cf8 NSString\cf4  \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 self
\f1\b0 \cf4  
\f0\b \cf2 as
\f1\b0 \cf4  \cf8 NSString\cf4 \
    \}\
    \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 pathExtension\cf4 : \cf8 String\cf4 ? \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf10 ns\cf4 .\cf13 pathExtension\cf4 \
    \}\
    \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 lastPathComponent\cf4 : \cf8 String\cf4 ? \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf10 ns\cf4 .\cf13 lastPathComponent\cf4 \
    \}\
\}\
\

\f0\b \cf2 internal
\f1\b0 \cf4  
\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Image\cf4  \{ \cf9 // Accessible in the same target\cf4 \
\
    
\f0\b \cf2 internal
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 name\cf4  : \cf8 String\cf4 \
    \
    
\f0\b \cf2 internal
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 mime\cf4  : \cf8 String\cf4  \{     \cf9 // Accessible only in this file. Never settable.\cf4 \
        
\f0\b \cf2 get
\f1\b0 \cf4  \{\
            
\f0\b \cf2 return
\f1\b0 \cf4  \cf11 "\cf4 \\(\cf10 name\cf4 .\cf10 pathExtension\cf4 !)\cf11 "\cf4 \
        \}\
    \}\
        \
    
\f0\b \cf2 init
\f1\b0 \cf4 (name: \cf8 String\cf4 ) \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf10 name\cf4  = name\
    \}\
    \
    \
    
\f0\b \cf2 internal
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf6 toString\cf4 () -> \cf8 String\cf4  \{\
\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf11 "image name: \cf4 \\(\cf10 name\cf4 )\cf11 \\t mime type: "\cf4  \cf13 +\cf4  \cf10 mime\cf4  \cf13 +\cf4  \cf11 "\\n"\cf4 \
    \
    \}\
    \
\
\
\}\
    \
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 img\cf4  = \cf12 Image\cf4 (name: \cf11 "foo.png"\cf4 )\
\

\f0\b \cf2 public
\f1\b0 \cf4  
\f0\b \cf2 class
\f1\b0 \cf4  \cf5 Webpage\cf4  \{\
    
\f0\b \cf2 public
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 title\cf4  : \cf8 String\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 created\cf4  : \cf8 NSDate\cf4 \
    
\f0\b \cf2 internal
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 images\cf4   : [\cf12 Image\cf4 ] \cf9 // Readable within the same target but only writable in this file\cf4 \
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 slug\cf4  : \cf8 String\cf4  \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  \cf10 created\cf4 .\cf13 description\cf4  \cf13 +\cf4  \cf10 title\cf4 \
    \}\
    \
    
\f0\b \cf2 init
\f1\b0 \cf4 (title: \cf8 String\cf4 ) \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf10 title\cf4  = title\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf10 created\cf4  = \cf8 NSDate\cf4 ()\
        
\f0\b \cf2 self
\f1\b0 \cf4 .\cf10 images\cf4  = []\
    \}\
    \
\}\
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 webPage\cf4  = \cf12 Webpage\cf4 (title: \cf11 "blog post"\cf4 )\
\
\cf9 //error: images will be inaccessible if it is declared  "private"\cf4 \
\cf10 webPage\cf4 .\cf10 images\cf4  = [\cf12 Image\cf4 (name: \cf11 "foo1.png"\cf4 ), \cf12 Image\cf4 (name: \cf11 "foo1.png"\cf4 )]\
\cf10 webPage\cf4 .\cf10 images\cf4 .\cf13 append\cf4 (\cf12 Image\cf4 (name:\cf11 "panda.gif"\cf4 ))\

\f0\b \cf2 var
\f1\b0 \cf4  \cf6 size\cf4  = \cf10 webPage\cf4 .\cf10 images\cf4 .\cf13 count\cf4 \
\

\f0\b \cf2 for
\f1\b0 \cf4  i 
\f0\b \cf2 in
\f1\b0 \cf4  \cf7 0\cf13 ..<\cf10 size\cf4  \{\
    
\f0\b \cf2 let
\f1\b0 \cf4  str = \cf10 webPage\cf4 .\cf10 images\cf4 [i].\cf10 toString\cf4 ()\
    \cf13 print\cf4  (str)\
\}\
}